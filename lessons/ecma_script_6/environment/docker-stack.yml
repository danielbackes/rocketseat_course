version: '3.7'
services:
  node_alpine:
    image: node:12.6.0-alpine
    networks:
      - traefik_network
    working_dir: /nodejs
    command: sh environment/entrypoint.sh
    volumes:
      - "../:/nodejs"
    deploy:
      mode: global
      labels:
       - traefik.port=3000
       - traefik.docker.network=traefik_network
       - traefik.frontend.rule=Host:rocketseat-starter-dev.tech
      resources:
        limits:
          cpus: "1"
          memory: 500M
  agent:
    image: portainer/agent
    environment:
      # REQUIRED: Should be equal to the service name prefixed by "tasks." when
      # deployed inside an overlay network
      AGENT_CLUSTER_ADDR: tasks.agent
      # AGENT_PORT: 9001
      # LOG_LEVEL: debug
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    image: portainer/portainer
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9000:9000"
    volumes:
      - portainer_data:/data
    networks:
      - agent_network      
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]     
  traefik:
    image: traefik
    ports:
     - "80:80"
     - "443:443"
     - "8080:8080"
    networks:
      - traefik_network
    command: 
      - --api
      - --docker
      - --docker.swarmmode
      - --docker.watch
      - --entrypoints=Name:http Address::80
      - --defaultentrypoints=http
      - --logLevel=INFO
      - --accessLog
    volumes:      
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      mode: replicated
      replicas: 1
      placement: 
        constraints: [node.role == manager]           
networks:
  agent_network:
    driver: overlay
    attachable: true
  traefik_network:
    driver: overlay

volumes:
  portainer_data:    
